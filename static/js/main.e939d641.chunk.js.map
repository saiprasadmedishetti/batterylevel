{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","batteryLevel","setBatteryLevel","isCharging","setIsCharging","getBattery","useCallback","a","window","navigator","battery","level","charging","interval","setInterval","useEffect","clearInterval","className","style","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PA6CeA,MA1Cf,WACE,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAAaC,sBAAW,sBAAC,4BAAAC,EAAA,0DACzBC,OAAOC,YAAaD,OAAOC,UAAUJ,WADZ,gCAELG,OAAOC,UAAUJ,aAFZ,QAErBK,EAFqB,QAGfC,QAAUV,GACpBC,EAAgC,IAAhBQ,EAAQC,OAEtBD,EAAQE,WAAaT,GACvBC,EAAcM,EAAQE,UAPG,2CAU5B,CAACT,EAAYF,IAEVY,EAAWC,aAAY,WAC3BT,MACC,KASH,OAPAU,qBAAU,WAER,OADAV,IACO,WACLW,cAAcH,MAEf,IAGD,sBAAMI,UAAU,YAAhB,SACE,sBACEA,UAAS,4BAAuBd,EAAa,kBAAoB,IADnE,UAGE,sBAAKc,UAAU,gBAAf,UACE,qBAAKA,UAAU,WAAWC,MAAO,CAAEC,MAAM,GAAD,OAAKlB,EAAL,QACxC,sBAAKgB,UAAU,iBAAf,UAAiChB,EAAjC,UAEF,qBAAKgB,UAAU,yBC3BRG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e939d641.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [batteryLevel, setBatteryLevel] = useState(0);\n  const [isCharging, setIsCharging] = useState(false);\n\n  const getBattery = useCallback(async () => {\n    if (window.navigator && window.navigator.getBattery) {\n      const battery = await window.navigator.getBattery();\n      if (battery.level !== batteryLevel) {\n        setBatteryLevel(battery.level * 100);\n      }\n      if (battery.charging !== isCharging) {\n        setIsCharging(battery.charging);\n      }\n    }\n  }, [isCharging, batteryLevel]);\n\n  const interval = setInterval(() => {\n    getBattery();\n  }, 1000);\n\n  useEffect(() => {\n    getBattery();\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return (\n    <main className=\"container\">\n      <div\n        className={`battery-container ${isCharging ? \"scale-animation\" : \"\"}`}\n      >\n        <div className=\"battery-inner\">\n          <div className=\"progress\" style={{ width: `${batteryLevel}%` }}></div>\n          <div className=\"battery-result\">{batteryLevel}%</div>\n        </div>\n        <div className=\"battery-handle\"></div>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}